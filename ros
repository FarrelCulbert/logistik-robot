#include <ArduinoHardware.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>

// Define motor pins

int motorDIR_BR = 2; // Motor A1 pin DIR 1
int motorPWM_BR = 3; // Motor A2 pin PWM 1
int motorDIR_FR = 4; // Motor B1 pin DIR 2
int motorPWM_FR = 5; // Motor B2 pin PWM 2
int motorDIR_BL = 6; // Motor C1 pin DIR
int motorPWM_BL = 7; // Motor C2 pin PWM
int motorDIR_FL = 8; // Motor D1 pin DIR
int motorPWM_FL = 9; // Motor D2 pin PWM

double w_BR = 0, w_BL = 0, w_FR = 0, w_FL = 0;

//wheel_rad is the wheel radius ,wheel_sep is
double wheel_rad = 0.0325, wheel_sep = 0.295;

ros::NodeHandle nh;
int lowSpeed = 200;
int highSpeed = 50;
double speed_ang = 0, speed_lin = 0, a = 0; 

void messageCb( const geometry_msgs::Twist& msg) {
  speed_ang = msg.angular.z;
  speed_lin = msg.linear.x;
  a = msg.linear.y;
  
  w_BL = ((speed_lin / wheel_rad) - ((speed_ang * wheel_sep) / (2.0 * wheel_rad)))*a;
  w_BR = ((speed_lin / wheel_rad) + ((speed_ang * wheel_sep) / (2.0 * wheel_rad)))*a;
  w_FL = (speed_lin / wheel_rad) - ((speed_ang * wheel_sep) / (2.0 * wheel_rad));
  w_FR = (speed_lin / wheel_rad) + ((speed_ang * wheel_sep) / (2.0 * wheel_rad));

}


ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", &messageCb );
void Motors_init();
void MotorFL(int Pulse_Width1);
void MotorBR(int Pulse_Width2);
void MotorFR(int Pulse_Width3);
void MotorBL(int Pulse_Width4);

void setup() {

  Motors_init();

  nh.initNode();

  nh.subscribe(sub);

  

}


void loop() {
 

  MotorFL(w_FL * 10);

  MotorBR(w_BR * 10);

  MotorBL(w_BL * 10);

  MotorFR(w_FR * 10);



  nh.spinOnce();

}

void Motors_init() {

  pinMode(motorDIR_BR, OUTPUT);
  pinMode(motorPWM_BR, OUTPUT);
  pinMode(motorDIR_FR, OUTPUT);
  pinMode(motorPWM_FR, OUTPUT);
  pinMode(motorDIR_BL, OUTPUT);
  pinMode(motorPWM_BL, OUTPUT);
  pinMode(motorDIR_FL, OUTPUT);
  pinMode(motorPWM_FL, OUTPUT);

}

void MotorFL(int Pulse_Width1) {
  Serial.print(Pulse_Width1);
  if (Pulse_Width1 > 0) {


    analogWrite(motorPWM_FL, Pulse_Width1);
    digitalWrite(motorDIR_FL, HIGH);

  }

  if (Pulse_Width1 < 0) {

    Pulse_Width1 = abs(Pulse_Width1);

    analogWrite(motorPWM_FL, Pulse_Width1);
    digitalWrite(motorDIR_FL, LOW);
  }

  if (Pulse_Width1 == 0) {

    analogWrite(motorPWM_FL, Pulse_Width1);
    digitalWrite(motorDIR_FL, LOW);

  }

}


void MotorBR(int Pulse_Width2) {
  Serial.print(Pulse_Width2);

  if (Pulse_Width2 > 0) {

    analogWrite(motorPWM_BR, Pulse_Width2);
    digitalWrite(motorDIR_BR, LOW);

  }

  if (Pulse_Width2 < 0) {

    Pulse_Width2 = abs(Pulse_Width2);

    analogWrite(motorPWM_BR, Pulse_Width2);
    digitalWrite(motorDIR_BR, HIGH);

  }

  if (Pulse_Width2 == 0) {

    analogWrite(motorPWM_BR, Pulse_Width2);
    digitalWrite(motorDIR_BR, LOW);

  }

}

void MotorFR(int Pulse_Width3) {
  Serial.print(Pulse_Width3);

  if (Pulse_Width3 > 0) {

    analogWrite(motorPWM_FR, Pulse_Width3);
    digitalWrite(motorDIR_FR, LOW);

  }

  if (Pulse_Width3 < 0) {

    Pulse_Width3 = abs(Pulse_Width3);

    analogWrite(motorPWM_FR, Pulse_Width3);
    digitalWrite(motorDIR_FR, HIGH);

  }

  if (Pulse_Width3 == 0) {

    analogWrite(motorPWM_FR, Pulse_Width3);
    digitalWrite(motorDIR_FR, LOW);

  }

}

void MotorBL(int Pulse_Width4) {
  Serial.print(Pulse_Width4);

  if (Pulse_Width4 > 0) {

    analogWrite(motorPWM_BL, Pulse_Width4);
    digitalWrite(motorDIR_BL, HIGH);

  }

  if (Pulse_Width4 < 0) {

    Pulse_Width4 = abs(Pulse_Width4);

    analogWrite(motorPWM_BL, Pulse_Width4);
    digitalWrite(motorDIR_BL, LOW);

  }

  if (Pulse_Width4 == 0) {

    analogWrite(motorPWM_BL, Pulse_Width4);
    digitalWrite(motorDIR_BL, LOW);

  }

}
